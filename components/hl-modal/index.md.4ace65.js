(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{4936:function(t,n){t.exports={content:["section",["p","模态对话框。"],["h2","何时使用"],["p","需要用户处理事务，又不希望跳转页面以致打断工作流程时，可以使用 ",["code","Modal"]," 在当前页面正中打开一个浮层，承载相应的操作。"],["p","另外当需要一个简洁的确认框询问用户时，可以使用 ",["code","Modal.confirm()"]," 等语法糖方法。"],["blockquote",["p","如果内容需要更新或交互时，可以使用 Modal.Dialog 组件"]]],meta:{type:"反馈",category:"Components",subtitle:"对话框",title:"HlModal",cover:"https://gw.alipayobjects.com/zos/alicdn/3StSdUlSH/Modal.svg",filename:"components/hl-modal/index.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#何时使用",title:"何时使用"},"何时使用"]],["li",["a",{className:"bisheng-toc-h2",href:"#API",title:"API"},"API"]]],api:["section",["h2","API"],["table",["thead",["tr",["th","参数"],["th","说明"],["th","类型"],["th","默认值"]]],["tbody",["tr",["td","open"],["td","对话框是否可见"],["td","boolean"],["td","无"]],["tr",["td","width"],["td","宽度，",["code","ternary"]," 属性为 true 时这个值默认为 400"],["td","string","|","number"],["td","750"]],["tr",["td","title"],["td","标题，当没有设置 title 时，弹窗不显示头部"],["td","string","|","ReactNode"],["td","无"]],["tr",["td","footer"],["td","底部内容，当不需要默认底部按钮时，可以设为 ",["code","footer={null}"]],["td","ReactNode"],["td","默认底部"]],["tr",["td","footerExtraContent"],["td","底部额外内容"],["td","ReactNode"],["td","-"]],["tr",["td","onCancel"],["td","点击遮罩层或右上角叉或取消按钮的回调"],["td","function(e)"],["td","无"]],["tr",["td","onOk"],["td","点击默认底部的确定按钮的回调"],["td","function(e)"],["td","无"]],["tr",["td","okText"],["td","默认底部的确认按钮文字"],["td","string","|","ReactNode"],["td","确定"]],["tr",["td","okType"],["td","默认底部的确认按钮类型"],["td","string"],["td","primary"]],["tr",["td","okButtonProps"],["td","默认底部的确认按钮 props"],["td",["a",{title:null,href:"/components/button"},"ButtonProps"]],["td","-"]],["tr",["td","cancelText"],["td","默认底部的取消按钮文字"],["td","string","|","ReactNode"],["td","取消"]],["tr",["td","cancelType"],["td","默认底部的取消按钮类型"],["td","string"],["td","neutral"]],["tr",["td","cancelButtonVisible"],["td","是否显示默认底部的取消按钮"],["td","boolean"],["td","true"]],["tr",["td","cancelButtonProps"],["td","默认底部的取消按钮 props"],["td",["a",{title:null,href:"/components/button"},"ButtonProps"]],["td","-"]],["tr",["td","ternary"],["td","是否为三元操作，为 ",["code","true"]," 时默认底部有三个操作按钮"],["td","boolean"],["td","false"]],["tr",["td","icon"],["td","设置 modal 的 icon (ternary 设为 true 时生效)"],["td","string","|","ReactNode"],["td","-"]],["tr",["td","onSecondly"],["td","点击默认底部的 Second 按钮的回调"],["td","function(e)"],["td","无"]],["tr",["td","secondText"],["td","默认底部的 Second 按钮文字"],["td","string","|","ReactNode"],["td","确定"]],["tr",["td","secondType"],["td","默认底部的 Second 按钮类型"],["td","string"],["td","neutral"]],["tr",["td","secondButtonProps"],["td","默认底部的 Second 按钮 props"],["td",["a",{title:null,href:"/components/button"},"ButtonProps"]],["td","-"]],["tr",["td","centered"],["td","垂直居中展示 Modal，",["code","ternary"]," 属性为 true 时这个值默认为 true"],["td","Boolean"],["td",["code","false"]]],["tr",["td","className"],["td","对话框的类名"],["td","string"],["td","-"]],["tr",["td","wrapClassName"],["td","对话框外层容器的类名"],["td","string"],["td","-"]],["tr",["td","style"],["td","可用于设置浮层的样式，调整浮层位置等"],["td","object"],["td","-"]],["tr",["td","scroll"],["td","滚动设置，",["a",{title:null,href:"#Modal-scroll-说明"},"可选项"]],["td","string ","|"," boolean"],["td","-"]],["tr",["td","full"],["td","是否全屏显示"],["td","boolean"],["td",["code","false"]]],["tr",["td","layout"],["td","布局模式，可选值 ",["code","default"]," ",["code","filled"],"，当值为",["code","filled"],"时，Modal 容器重置内 padding 为 0 内容由 children 显示"],["td","string"],["td",["code","default"]]],["tr",["td","closable"],["td","是否显示右上角的关闭按钮，",["code","ternary"]," 属性为 true 时这个值默认为 false"],["td","boolean"],["td","true"]],["tr",["td","mask"],["td","是否展示遮罩"],["td","Boolean"],["td","true"]],["tr",["td","maskStyle"],["td","遮罩样式"],["td","object"],["td","{}"]],["tr",["td","maskClosable"],["td","点击蒙层是否允许关闭，",["code","ternary"]," 属性为 true 时这个值默认为 false"],["td","boolean"],["td","true"]],["tr",["td","confirmLoading"],["td","确定按钮 loading"],["td","boolean"],["td","无"]],["tr",["td","afterClose"],["td","Modal 完全关闭后的回调"],["td","function"],["td","无"]],["tr",["td","destroyOnClose"],["td","关闭时销毁 Modal 里的子元素"],["td","boolean"],["td","false"]],["tr",["td","forceRender"],["td","强制渲染 Modal"],["td","boolean"],["td","false"]],["tr",["td","getContainer"],["td","指定 Modal 挂载的 HTML 节点"],["td","(instance): HTMLElement"],["td","() => document.body"]],["tr",["td","keyboard"],["td","是否支持键盘 esc 关闭"],["td","boolean"],["td","true"]],["tr",["td","zIndex"],["td","设置 Modal 的 ",["code","z-index"]],["td","Number"],["td","1000"]],["tr",["td","bodyStyle"],["td","Modal body 样式"],["td","object"],["td","{}"]],["tr",["td","modalRender"],["td","自定义渲染对话框"],["td","(node: ReactNode) => ReactNode"],["td","-"]],["tr",["td","fixedCloseBtn"],["td","关闭按钮是否固定到 Modal 外"],["td","boolean"],["td","true"]]]],["h4","Modal scroll 说明"],["ul",["li",["p",["code","true"]],["ul",["li",["p","body 的上 padding 为 16px 下 padding 为 0"]],["li",["p","children 会被包裹在 ScrollContainer 中"]]]],["li",["p",["code","custom"]],["ul",["li",["p","body 的上 padding 为 16px 下 padding 为 0"]]]]],["h4","注意"],["blockquote",["p",["code","<Modal />"]," 默认关闭后状态不会自动清空, 如果希望每次打开都是新内容，请设置 ",["code","destroyOnClose"],"。"]],["h3","Modal 辅助方法"],["ul",["li",["p",["code","Modal.getMaxHeight(head?: boolean, foot?: boolean, bodyScrollPadding?: boolean)"]]]],["p","获取 Modal 能够设置的最大高度，可以通过传入参数来计算剩余的高度"],["blockquote",["p","通过这个方法可以计算出内容的最大高度，方便设置包含滚动区域的自定义内容"]],["table",["thead",["tr",["th","参数"],["th","说明"],["th","类型"],["th","默认值"]]],["tbody",["tr",["td","head"],["td","值为 ",["code","true"]," 时减去 head 的默认高度（66px）"],["td","boolean"],["td","false"]],["tr",["td","foot"],["td","值为 ",["code","true"]," 时减去 foot 的默认高度（68px）"],["td","boolean"],["td","false"]],["tr",["td","bodyScrollPadding"],["td","值为 ",["code","true"]," 时减去 scroll body 的默认上 padding（16px）"],["td","boolean"],["td","false"]]]],["h3","Modal 方法式调用"],["ul",["li",["p",["code","Modal.show"]]]],["p","通过调用方法来打开一个弹窗，适用于展示静态内容。参数为 object，具体属性参考 ",["a",{title:null,href:"#API"},"Modal"],"，部分参数区别如下"],["table",["thead",["tr",["th","参数"],["th","说明"],["th","类型"],["th","默认值"]]],["tbody",["tr",["td","open"],["td","值为 ",["code","true"]," 不支持修改"],["td","boolean"],["td","true"]],["tr",["td","closable"],["td","默认不显示右上角的关闭按钮"],["td","boolean"],["td","false"]]]],["p","函数调用后，会返回一个引用，可以通过该引用更新和关闭弹窗。"],["pre",{lang:"jsx",highlighted:'<span class="token keyword">const</span> mod <span class="token operator">=</span> Modal<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  title<span class="token punctuation">:</span> <span class="token string">\'Modal show\'</span><span class="token punctuation">,</span>\n  content<span class="token punctuation">:</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>some messages<span class="token operator">...</span>some messages<span class="token operator">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> mod<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>我知道了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmod<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">\'update title\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>'},["code","const mod = Modal.show({\n  title: 'Modal show',\n  content: (\n    <div>\n      <p>some messages...some messages...</p>\n      <br />\n      <br />\n      <Button onClick={() => mod.destroy()}>我知道了</Button>\n    </div>\n  ),\n});\nmod.update({ title: 'update title' });"]],["h3","Modal 方法式调用"],["p","包括："],["ul",["li",["p",["code","Modal.alert"]]],["li",["p",["code","Modal.confirm"]]],["li",["p",["code","Modal.info"]]],["li",["p",["code","Modal.success"]]],["li",["p",["code","Modal.error"]]],["li",["p",["code","Modal.warning"]]]],["p","以上均为一个函数，参数为 object，具体属性如下："],["table",["thead",["tr",["th","参数"],["th","说明"],["th","类型"],["th","默认值"],["th","版本"]]],["tbody",["tr",["td","afterClose"],["td","Modal 完全关闭后的回调"],["td","function"],["td","-"],["td","4.9.0"]],["tr",["td","autoFocusButton"],["td","指定自动获得焦点的按钮"],["td","null ","|"," ",["code","ok"]," ","|"," ",["code","cancel"]],["td",["code","ok"]],["td"]],["tr",["td","bodyStyle"],["td","Modal body 样式"],["td","CSSProperties"],["td"],["td","4.8.0"]],["tr",["td","cancelButtonProps"],["td","cancel 按钮 props"],["td",["a",{title:null,href:"/components/button/#API"},"ButtonProps"]],["td","-"],["td"]],["tr",["td","cancelText"],["td","设置 Modal.confirm 取消按钮文字"],["td","string"],["td",["code","取消"]],["td"]],["tr",["td","centered"],["td","垂直居中展示 Modal"],["td","boolean"],["td","false"],["td"]],["tr",["td","className"],["td","容器类名"],["td","string"],["td","-"],["td"]],["tr",["td","closable"],["td","是否显示右上角的关闭按钮"],["td","boolean"],["td","false"],["td","4.9.0"]],["tr",["td","closeIcon"],["td","自定义关闭图标"],["td","ReactNode"],["td","undefined"],["td","4.9.0"]],["tr",["td","content"],["td","内容"],["td","ReactNode"],["td","-"],["td"]],["tr",["td","getContainer"],["td","指定 Modal 挂载的 HTML 节点, false 为挂载在当前 dom"],["td","HTMLElement ","|"," () => HTMLElement ","|"," Selectors ","|"," false"],["td","document.body"],["td"]],["tr",["td","icon"],["td","自定义图标"],["td","ReactNode"],["td","<","QuestionCircle />"],["td"]],["tr",["td","keyboard"],["td","是否支持键盘 esc 关闭"],["td","boolean"],["td","true"],["td"]],["tr",["td","mask"],["td","是否展示遮罩"],["td","boolean"],["td","true"],["td"]],["tr",["td","maskClosable"],["td","点击蒙层是否允许关闭"],["td","boolean"],["td","false"],["td"]],["tr",["td","maskStyle"],["td","遮罩样式"],["td","object"],["td","{}"],["td"]],["tr",["td","okButtonProps"],["td","ok 按钮 props"],["td",["a",{title:null,href:"/components/button/#API"},"ButtonProps"]],["td","-"],["td"]],["tr",["td","okText"],["td","确认按钮文字"],["td","string"],["td",["code","确定"]],["td"]],["tr",["td","okType"],["td","确认按钮类型"],["td","string"],["td",["code","primary"]],["td"]],["tr",["td","style"],["td","可用于设置浮层的样式，调整浮层位置等"],["td","CSSProperties"],["td","-"],["td"]],["tr",["td","title"],["td","标题"],["td","ReactNode"],["td","-"],["td"]],["tr",["td","width"],["td","宽度"],["td","string ","|"," number"],["td","416"],["td"]],["tr",["td","wrapClassName"],["td","对话框外层容器的类名"],["td","string"],["td","-"],["td","4.18.0"]],["tr",["td","zIndex"],["td","设置 Modal 的 ",["code","z-index"]],["td","number"],["td","1000"],["td"]],["tr",["td","onCancel"],["td","取消回调，参数为关闭函数，返回 promise 时 resolve 后自动关闭"],["td","function(close)"],["td","-"],["td"]],["tr",["td","onOk"],["td","点击确定回调，参数为关闭函数，返回 promise 时 resolve 后自动关闭"],["td","function(close)"],["td","-"],["td"]]]],["p","以上函数调用后，会返回一个引用，可以通过该引用更新和关闭弹窗。"],["pre",{lang:"jsx",highlighted:'<span class="token keyword">const</span> modal <span class="token operator">=</span> HlModal<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodal<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  title<span class="token punctuation">:</span> <span class="token string">\'修改的标题\'</span><span class="token punctuation">,</span>\n  content<span class="token punctuation">:</span> <span class="token string">\'修改的内容\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment" spellcheck="true">// 可以通过传入函数的方式更新弹窗</span>\nmodal<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prevConfig<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token operator">...</span>prevConfig<span class="token punctuation">,</span>\n  title<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prevConfig<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">（新）`</span></span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodal<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>'},["code","const modal = HlModal.info();\n\nmodal.update({\n  title: '修改的标题',\n  content: '修改的内容',\n});\n\n// 可以通过传入函数的方式更新弹窗\nmodal.update((prevConfig) => ({\n  ...prevConfig,\n  title: `${prevConfig.title}（新）`,\n}));\n\nmodal.destroy();"]],["ul",["li",["p",["code","HlModal.destroyAll"]]]],["p","使用 ",["code","HlModal.destroyAll()"]," 可以销毁弹出的确认窗（即上述的 ",["code","HlModal.info"],"、",["code","HlModal.success"],"、",["code","HlModal.error"],"、",["code","HlModal.warning"],"、",["code","HlModal.confirm"],"）。通常用于路由监听当中，处理路由前进、后退不能销毁确认对话框的问题，而不用各处去使用实例的返回值进行关闭（",["code","modal.destroy()"]," 适用于主动关闭，而不是路由这样被动关闭）"],["pre",{lang:"jsx",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">{</span> browserHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-router\'</span><span class="token punctuation">;</span>\n\n<span class="token comment" spellcheck="true">// router change</span>\nbrowserHistory<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  HlModal<span class="token punctuation">.</span><span class="token function">destroyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>'},["code","import { browserHistory } from 'react-router';\n\n// router change\nbrowserHistory.listen(() => {\n  HlModal.destroyAll();\n});"]],["h3","HlModal.useModal()"],["p","当你需要使用 Context 时，可以通过 ",["code","HlModal.useModal"]," 创建一个 ",["code","contextHolder"]," 插入子节点中。通过 hooks 创建的临时 Modal 将会得到 ",["code","contextHolder"]," 所在位置的所有上下文。创建的 ",["code","modal"]," 对象拥有与 ",["a",{title:null,href:"#Modal.method()"},["code","HlModal.method"]]," 相同的创建通知方法。"],["pre",{lang:"jsx",highlighted:'<span class="token keyword">const</span> <span class="token punctuation">[</span>modal<span class="token punctuation">,</span> contextHolder<span class="token punctuation">]</span> <span class="token operator">=</span> Modal<span class="token punctuation">.</span><span class="token function">useModal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nReact<span class="token punctuation">.</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  modal<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">// ...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>contextHolder<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>'},["code","const [modal, contextHolder] = Modal.useModal();\n\nReact.useEffect(() => {\n  modal.confirm({\n    // ...\n  });\n}, []);\n\nreturn <div>{contextHolder}</div>;"]],["style","\n.code-box-demo .hlui-btn {\n  margin-right: 8px;\n  margin-bottom: 8px;\n}\n"],["ul",["li",["p",["code","Modal.destroyAll"]]]],["p","使用 ",["code","Modal.destroyAll()"]," 可以销毁弹出的确认窗（即上述的 Modal.alert、Modal.confirm）。通常用于路由监听当中，处理路由前进、后退不能销毁确认对话框的问题，而不用各处去使用实例的返回值进行关闭（modal.destroy() 适用于主动关闭，而不是路由这样被动关闭）"],["pre",{lang:"jsx",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">{</span> browserHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-router\'</span><span class="token punctuation">;</span>\n\n<span class="token comment" spellcheck="true">// router change</span>\nbrowserHistory<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  Modal<span class="token punctuation">.</span><span class="token function">destroyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>'},["code","import { browserHistory } from 'react-router';\n\n// router change\nbrowserHistory.listen(() => {\n  Modal.destroyAll();\n});"]]]}}}]);