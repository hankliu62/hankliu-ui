(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{4975:function(t,n){t.exports={content:["section",["p","模态对话框。"],["h2","何时使用"],["p","需要用户处理事务，又不希望跳转页面以致打断工作流程时，可以使用 ",["code","Modal"]," 在当前页面正中打开一个浮层，承载相应的操作。"],["p","另外当需要一个简洁的确认框询问用户时，可以使用 ",["code","Modal.confirm()"]," 等语法糖方法。"]],meta:{type:"反馈",category:"Components",subtitle:"对话框",title:"Modal",cover:"https://gw.alipayobjects.com/zos/alicdn/3StSdUlSH/Modal.svg",filename:"components/modal/index.zh-CN.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#何时使用",title:"何时使用"},"何时使用"]],["li",["a",{className:"bisheng-toc-h2",href:"#API",title:"API"},"API"]],["li",["a",{className:"bisheng-toc-h2",href:"#FAQ",title:"FAQ"},"FAQ"]]],api:["section",["h2","API"],["table",["thead",["tr",["th","参数"],["th","说明"],["th","类型"],["th","默认值"],["th","版本"]]],["tbody",["tr",["td","afterClose"],["td","Modal 完全关闭后的回调"],["td","function"],["td","-"],["td"]],["tr",["td","bodyStyle"],["td","Modal body 样式"],["td","CSSProperties"],["td"],["td"]],["tr",["td","cancelButtonProps"],["td","cancel 按钮 props"],["td",["a",{title:null,href:"/components/button/#API"},"ButtonProps"]],["td","-"],["td"]],["tr",["td","cancelText"],["td","取消按钮文字"],["td","ReactNode"],["td",["code","取消"]],["td"]],["tr",["td","centered"],["td","垂直居中展示 Modal"],["td","boolean"],["td","false"],["td"]],["tr",["td","closable"],["td","是否显示右上角的关闭按钮"],["td","boolean"],["td","true"],["td"]],["tr",["td","closeIcon"],["td","自定义关闭图标"],["td","ReactNode"],["td","<","CloseOutlined />"],["td"]],["tr",["td","confirmLoading"],["td","确定按钮 loading"],["td","boolean"],["td","false"],["td"]],["tr",["td","destroyOnClose"],["td","关闭时销毁 Modal 里的子元素"],["td","boolean"],["td","false"],["td"]],["tr",["td","focusTriggerAfterClose"],["td","对话框关闭后是否需要聚焦触发元素"],["td","boolean"],["td","true"],["td","4.9.0"]],["tr",["td","footer"],["td","底部内容，当不需要默认底部按钮时，可以设为 ",["code","footer={null}"]],["td","ReactNode"],["td","(确定取消按钮)"],["td"]],["tr",["td","forceRender"],["td","强制渲染 Modal"],["td","boolean"],["td","false"],["td"]],["tr",["td","getContainer"],["td","指定 Modal 挂载的 HTML 节点, false 为挂载在当前 dom"],["td","HTMLElement ","|"," () => HTMLElement ","|"," Selectors ","|"," false"],["td","document.body"],["td"]],["tr",["td","keyboard"],["td","是否支持键盘 esc 关闭"],["td","boolean"],["td","true"],["td"]],["tr",["td","mask"],["td","是否展示遮罩"],["td","boolean"],["td","true"],["td"]],["tr",["td","maskClosable"],["td","点击蒙层是否允许关闭"],["td","boolean"],["td","true"],["td"]],["tr",["td","maskStyle"],["td","遮罩样式"],["td","CSSProperties"],["td"],["td"]],["tr",["td","modalRender"],["td","自定义渲染对话框"],["td","(node: ReactNode) => ReactNode"],["td","-"],["td","4.7.0"]],["tr",["td","okButtonProps"],["td","ok 按钮 props"],["td",["a",{title:null,href:"/components/button/#API"},"ButtonProps"]],["td","-"],["td"]],["tr",["td","okText"],["td","确认按钮文字"],["td","ReactNode"],["td",["code","确定"]],["td"]],["tr",["td","okType"],["td","确认按钮类型"],["td","string"],["td",["code","primary"]],["td"]],["tr",["td","style"],["td","可用于设置浮层的样式，调整浮层位置等"],["td","CSSProperties"],["td","-"],["td"]],["tr",["td","title"],["td","标题"],["td","ReactNode"],["td","-"],["td"]],["tr",["td","open"],["td","对话框是否可见"],["td","boolean"],["td","-"],["td"]],["tr",["td","width"],["td","宽度"],["td","string ","|"," number"],["td","520"],["td"]],["tr",["td","wrapClassName"],["td","对话框外层容器的类名"],["td","string"],["td","-"],["td"]],["tr",["td","zIndex"],["td","设置 Modal 的 ",["code","z-index"]],["td","number"],["td","1000"],["td"]],["tr",["td","onCancel"],["td","点击遮罩层或右上角叉或取消按钮的回调"],["td","function(e)"],["td","-"],["td"]],["tr",["td","onOk"],["td","点击确定回调"],["td","function(e)"],["td","-"],["td"]]]],["h4","注意"],["ul",["li",["p",["code","<Modal />"]," 默认关闭后状态不会自动清空, 如果希望每次打开都是新内容，请设置 ",["code","destroyOnClose"],"。"]],["li",["p",["code","<Modal />"]," 和 Form 一起配合使用时，设置 ",["code","destroyOnClose"]," 也不会在 Modal 关闭时销毁表单字段数据，需要设置 ",["code","<Form preserve={false} />"],"。"]],["li",["p",["code","Modal.method()"]," RTL 模式仅支持 hooks 用法。"]]],["h3","Modal.method()"],["p","包括："],["ul",["li",["p",["code","Modal.info"]]],["li",["p",["code","Modal.success"]]],["li",["p",["code","Modal.error"]]],["li",["p",["code","Modal.warning"]]],["li",["p",["code","Modal.confirm"]]]],["p","以上均为一个函数，参数为 object，具体属性如下："],["table",["thead",["tr",["th","参数"],["th","说明"],["th","类型"],["th","默认值"],["th","版本"]]],["tbody",["tr",["td","afterClose"],["td","Modal 完全关闭后的回调"],["td","function"],["td","-"],["td","4.9.0"]],["tr",["td","autoFocusButton"],["td","指定自动获得焦点的按钮"],["td","null ","|"," ",["code","ok"]," ","|"," ",["code","cancel"]],["td",["code","ok"]],["td"]],["tr",["td","bodyStyle"],["td","Modal body 样式"],["td","CSSProperties"],["td"],["td","4.8.0"]],["tr",["td","cancelButtonProps"],["td","cancel 按钮 props"],["td",["a",{title:null,href:"/components/button/#API"},"ButtonProps"]],["td","-"],["td"]],["tr",["td","cancelText"],["td","设置 Modal.confirm 取消按钮文字"],["td","string"],["td",["code","取消"]],["td"]],["tr",["td","centered"],["td","垂直居中展示 Modal"],["td","boolean"],["td","false"],["td"]],["tr",["td","className"],["td","容器类名"],["td","string"],["td","-"],["td"]],["tr",["td","closable"],["td","是否显示右上角的关闭按钮"],["td","boolean"],["td","false"],["td","4.9.0"]],["tr",["td","closeIcon"],["td","自定义关闭图标"],["td","ReactNode"],["td","undefined"],["td","4.9.0"]],["tr",["td","content"],["td","内容"],["td","ReactNode"],["td","-"],["td"]],["tr",["td","getContainer"],["td","指定 Modal 挂载的 HTML 节点, false 为挂载在当前 dom"],["td","HTMLElement ","|"," () => HTMLElement ","|"," Selectors ","|"," false"],["td","document.body"],["td"]],["tr",["td","icon"],["td","自定义图标"],["td","ReactNode"],["td","<","QuestionCircle />"],["td"]],["tr",["td","keyboard"],["td","是否支持键盘 esc 关闭"],["td","boolean"],["td","true"],["td"]],["tr",["td","mask"],["td","是否展示遮罩"],["td","boolean"],["td","true"],["td"]],["tr",["td","maskClosable"],["td","点击蒙层是否允许关闭"],["td","boolean"],["td","false"],["td"]],["tr",["td","maskStyle"],["td","遮罩样式"],["td","object"],["td","{}"],["td"]],["tr",["td","okButtonProps"],["td","ok 按钮 props"],["td",["a",{title:null,href:"/components/button/#API"},"ButtonProps"]],["td","-"],["td"]],["tr",["td","okText"],["td","确认按钮文字"],["td","string"],["td",["code","确定"]],["td"]],["tr",["td","okType"],["td","确认按钮类型"],["td","string"],["td",["code","primary"]],["td"]],["tr",["td","style"],["td","可用于设置浮层的样式，调整浮层位置等"],["td","CSSProperties"],["td","-"],["td"]],["tr",["td","title"],["td","标题"],["td","ReactNode"],["td","-"],["td"]],["tr",["td","width"],["td","宽度"],["td","string ","|"," number"],["td","416"],["td"]],["tr",["td","wrapClassName"],["td","对话框外层容器的类名"],["td","string"],["td","-"],["td","4.18.0"]],["tr",["td","zIndex"],["td","设置 Modal 的 ",["code","z-index"]],["td","number"],["td","1000"],["td"]],["tr",["td","onCancel"],["td","取消回调，参数为关闭函数，返回 promise 时 resolve 后自动关闭"],["td","function(close)"],["td","-"],["td"]],["tr",["td","onOk"],["td","点击确定回调，参数为关闭函数，返回 promise 时 resolve 后自动关闭"],["td","function(close)"],["td","-"],["td"]]]],["p","以上函数调用后，会返回一个引用，可以通过该引用更新和关闭弹窗。"],["pre",{lang:"jsx",highlighted:'<span class="token keyword">const</span> modal <span class="token operator">=</span> Modal<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodal<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  title<span class="token punctuation">:</span> <span class="token string">\'修改的标题\'</span><span class="token punctuation">,</span>\n  content<span class="token punctuation">:</span> <span class="token string">\'修改的内容\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment" spellcheck="true">// 在 4.8.0 或更高版本中，可以通过传入函数的方式更新弹窗</span>\nmodal<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prevConfig<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token operator">...</span>prevConfig<span class="token punctuation">,</span>\n  title<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prevConfig<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">（新）`</span></span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodal<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>'},["code","const modal = Modal.info();\n\nmodal.update({\n  title: '修改的标题',\n  content: '修改的内容',\n});\n\n// 在 4.8.0 或更高版本中，可以通过传入函数的方式更新弹窗\nmodal.update((prevConfig) => ({\n  ...prevConfig,\n  title: `${prevConfig.title}（新）`,\n}));\n\nmodal.destroy();"]],["ul",["li",["p",["code","Modal.destroyAll"]]]],["p","使用 ",["code","Modal.destroyAll()"]," 可以销毁弹出的确认窗（即上述的 ",["code","Modal.info"],"、",["code","Modal.success"],"、",["code","Modal.error"],"、",["code","Modal.warning"],"、",["code","Modal.confirm"],"）。通常用于路由监听当中，处理路由前进、后退不能销毁确认对话框的问题，而不用各处去使用实例的返回值进行关闭（",["code","modal.destroy()"]," 适用于主动关闭，而不是路由这样被动关闭）"],["pre",{lang:"jsx",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">{</span> browserHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-router\'</span><span class="token punctuation">;</span>\n\n<span class="token comment" spellcheck="true">// router change</span>\nbrowserHistory<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  Modal<span class="token punctuation">.</span><span class="token function">destroyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>'},["code","import { browserHistory } from 'react-router';\n\n// router change\nbrowserHistory.listen(() => {\n  Modal.destroyAll();\n});"]],["h3","Modal.useModal()"],["p","当你需要使用 Context 时，可以通过 ",["code","Modal.useModal"]," 创建一个 ",["code","contextHolder"]," 插入子节点中。通过 hooks 创建的临时 Modal 将会得到 ",["code","contextHolder"]," 所在位置的所有上下文。创建的 ",["code","modal"]," 对象拥有与 ",["a",{title:null,href:"#Modal.method()"},["code","Modal.method"]]," 相同的创建通知方法。"],["pre",{lang:"jsx",highlighted:'<span class="token keyword">const</span> <span class="token punctuation">[</span>modal<span class="token punctuation">,</span> contextHolder<span class="token punctuation">]</span> <span class="token operator">=</span> Modal<span class="token punctuation">.</span><span class="token function">useModal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nReact<span class="token punctuation">.</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  modal<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">// ...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>contextHolder<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>'},["code","const [modal, contextHolder] = Modal.useModal();\n\nReact.useEffect(() => {\n  modal.confirm({\n    // ...\n  });\n}, []);\n\nreturn <div>{contextHolder}</div>;"]],["h2","FAQ"],["h3","为什么 Modal 方法不能获取 context、redux、的内容和 ConfigProvider ",["code","locale/prefixCls"]," 配置？"],["p","直接调用 Modal 方法，antd 会通过 ",["code","ReactDOM.render"]," 动态创建新的 React 实体。其 context 与当前代码所在 context 并不相同，因而无法获取 context 信息。"],["p","当你需要 context 信息（例如 ConfigProvider 配置的内容）时，可以通过 ",["code","Modal.useModal"]," 方法会返回 ",["code","modal"]," 实体以及 ",["code","contextHolder"]," 节点。将其插入到你需要获取 context 位置即可："],["pre",{lang:"tsx",highlighted:'<span class="token keyword">const</span> <span class="token punctuation">[</span>modal<span class="token punctuation">,</span> contextHolder<span class="token punctuation">]</span> <span class="token operator">=</span> Modal<span class="token punctuation">.</span><span class="token function">useModal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\nreturn <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>Context1<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token string">"Ant"</span><span class="token operator">></span>\n    {<span class="token operator">/</span><span class="token operator">*</span> contextHolder 在 Context1 内，它可以获得 Context1 的 context <span class="token operator">*</span><span class="token operator">/</span>}\n    {contextHolder}\n    <span class="token operator">&lt;</span>Context2<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token string">"Design"</span><span class="token operator">></span>\n      {<span class="token operator">/</span><span class="token operator">*</span> contextHolder 在 Context2 外，因而不会获得 Context2 的 context <span class="token operator">*</span><span class="token operator">/</span>}\n    <span class="token operator">&lt;</span><span class="token operator">/</span>Context2<span class="token punctuation">.</span>Provider<span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>Context1<span class="token punctuation">.</span>Provider<span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>'},["code",'const [modal, contextHolder] = Modal.useModal();\n\nreturn (\n  <Context1.Provider value="Ant">\n    {/* contextHolder 在 Context1 内，它可以获得 Context1 的 context */}\n    {contextHolder}\n    <Context2.Provider value="Design">\n      {/* contextHolder 在 Context2 外，因而不会获得 Context2 的 context */}\n    </Context2.Provider>\n  </Context1.Provider>\n);']],["p",["strong","异同："],"通过 hooks 创建的 ",["code","contextHolder"]," 必须插入到子元素节点中才会生效，当你不需要上下文信息时请直接调用。"],["h3","如何关闭 Modal 动画？"],["p","你可以通过 ",["code",'transitionName=""']," 和 ",["code",'maskTransitionName=""']," 去除动画 CSS，但是需要注意的是。该方法为内部方法，我们不保证下个大版本重构时该属性会被保留。"],["h3","静态方法如何设置 prefixCls ？"],["p","你可以通过 ",["a",{title:null,href:"/components/config-provider/#ConfigProvider.config()-4.13.0+"},["code","ConfigProvider.config"]]," 进行设置。"]]}}}]);