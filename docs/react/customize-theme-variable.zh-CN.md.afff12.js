(window.webpackJsonp=window.webpackJsonp||[]).push([[206],{3760:function(n,s){n.exports={content:["article",["p","除了 ",["a",{title:null,href:"/docs/react/customize-theme"},"less 定制主题"]," 外，我们还提供了 CSS Variable 版本以支持动态切换主题能力。你可以在 ",["a",{title:null,href:"/components/config-provider/#components-config-provider-demo-theme"},"ConfigProvider"]," 进行体验。"],["h2","注意事项"],["ul",["li",["p","该功能通过动态修改 CSS Variable 实现，因而在 IE 中页面将无法正常展示。请先确认你的用户环境是否需要支持 IE。"]],["li",["p","该功能在 ",["code","antd@4.17.0-alpha.0"]," 版本起支持。"]]],["h2","如何使用"],["h3","引入 antd.variable.min.css"],["p","替换当前项目引入样式文件为 CSS Variable 版本："],["pre",{lang:"diff",highlighted:"<span class=\"token deleted\">-- import 'antd/dist/antd.min.css';</span>\n<span class=\"token inserted\">++ import 'antd/dist/antd.variable.min.css';</span>"},["code","-- import 'antd/dist/antd.min.css';\n++ import 'antd/dist/antd.variable.min.css';"]],["p","注：如果你使用了 ",["code","babel-plugin-import"],"，需要将其去除。"],["h3","静态方法配置"],["p","调用 ConfigProvider 配置方法设置主题色："],["pre",{lang:"ts",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">{</span> ConfigProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@hankliu/hankliu-ui\'</span><span class="token punctuation">;</span>\n\nConfigProvider<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  theme<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    primaryColor<span class="token punctuation">:</span> <span class="token string">\'#25b864\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>'},["code","import { ConfigProvider } from '@hankliu/hankliu-ui';\n\nConfigProvider.config({\n  theme: {\n    primaryColor: '#25b864',\n  },\n});"]],["h2","冲突解决"],["p","默认情况下，CSS Variable 会以 ",["code","--ant"]," 作为前缀。当你的项目中引用多份 css 文件时，可以通过修改前缀的方式避免冲突。"],["h3","代码调整"],["p","通过 ConfigProvider 在顶层修改 ",["code","prefixCls"],"："],["pre",{lang:"tsx",highlighted:'import { ConfigProvider } from <span class="token string">\'@hankliu/hankliu-ui\'</span><span class="token comment" spellcheck="true">;</span>\n\nexport <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>ConfigProvider prefixCls<span class="token operator">=</span><span class="token string">"custom"</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>MyApp <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>ConfigProvider<span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>'},["code","import { ConfigProvider } from '@hankliu/hankliu-ui';\n\nexport default () => (\n  <ConfigProvider prefixCls=\"custom\">\n    <MyApp />\n  </ConfigProvider>\n);"]],["p","通过静态方法设置主题色以及对应 ",["code","prefixCls"],"："],["pre",{lang:"ts",highlighted:'ConfigProvider<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  prefixCls<span class="token punctuation">:</span> <span class="token string">\'custom\'</span><span class="token punctuation">,</span>\n  theme<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    primaryColor<span class="token punctuation">:</span> <span class="token string">\'#25b864\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>'},["code","ConfigProvider.config({\n  prefixCls: 'custom',\n  theme: {\n    primaryColor: '#25b864',\n  },\n});"]],["h3","编译 less"],["p","由于前缀变更，你需要重新生成一份对应的 css 文件。"],["pre",{lang:"bash",highlighted:'lessc --js --modify-var<span class="token operator">=</span><span class="token string">"ant-prefix=custom"</span> antd/dist/antd.variable.less modified.css'},["code",'lessc --js --modify-var="ant-prefix=custom" antd/dist/antd.variable.less modified.css']],["h3","相关变更"],["p","为了实现 CSS Variable 并保持原始用法兼容性，我们于 ",["code","dist/antd.xxx.less"]," 文件中添加了 ",["code","@root-entry-name: xxx;"]," 入口注入以支持 less 动态加载对应的 less 文件。一般情况下，你不需要关注该变化。但是，如果你的项目中直接引用了 ",["code","lib|es"]," 目录下的 less 文件。你需要在 less 入口处配置 ",["code","@root-entry-name: default;"]," （或者 ",["code","@root-entry-name: variable;"],"）以使 less 可以找到正确的入口。"],["p","此外，我们将 ",["code","lib|es/style/minxins/index.less"]," 中的 ",["code","@import 'motion'"]," 和 ",["code","@import 'reset'"]," 迁移至了 ",["code","lib|es/style/themes/xxx.less"]," 中，因为这两个文件依赖了主题相关变量。如果你使用了相关内部方法，请自行调整。当然，我们还是建议直接使用 ",["code","dist"]," 目录下的 ",["code","antd.less"]," 文件而非调用内部文件，因为它们经常会受重构影响。"]],meta:{order:7.1,title:"动态主题（实验性）",filename:"docs/react/customize-theme-variable.zh-CN.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#注意事项",title:"注意事项"},"注意事项"]],["li",["a",{className:"bisheng-toc-h2",href:"#如何使用",title:"如何使用"},"如何使用"]],["li",["a",{className:"bisheng-toc-h2",href:"#冲突解决",title:"冲突解决"},"冲突解决"]]]}}}]);